INSERT INTO `Common` (`title`, `description`) VALUES
('Course Policies And Student Responsibilities', 'As a student of the course, you are required to abide by both the University Code of Conduct and the Student Code of Conduct. The Codes provide information on the responsibilities of all NTU students, as well as examples of midconduct and details about how student can report suspected misconduct. The university also has the Student Mental Health Policy. The policy sates the University\'s commitment to provideing a supportive envrionment for the holistic development of students, includeing the improvement of mental health and wellbeing. These policies and codes concering students can be found in the following link. <a href="http://www.ntu.edu.sg/SAO/Pages/Policies-concerning-students.aspx">http://www.ntu.edu.sg/SAO/Pages/Policies-concerning-students.aspx</a>'),
('Academic Integrity', 'Good academic work depends on honesty and ethical behavior. The quality of your work as a student relies on adhering to the principles of academic integrity and to the NTU Honor Code, a set of values shared by the whole university community. Truth, Trust and Justice are at the core of NTU\'s shared values.
As a student, it is important that you recognize your responsibilities in understanding and applying the principles of acadmeic integrity in all the work you do at NTU. Not knowing what is involved in maintaining academic integrity does not excuse academic dishonesty. You need to actively equip yourself with strategies to avoid all forms of academic dishonesty, including plagiarism, academic fraud, and collusion and cheating. If you are uncertain of the definitions of any of these terms, you should go to the academic integrity website for more information. Consult your instructor(s) if you need any clarificiation about the requirements of academic integrity in the course.');
INSERT INTO `graduateAttributes` (`ID`, `main`, `description`) VALUES
('a', 'Engineering Knowledge', 'Apply the knowledge of mathematics, natural science, engineering fundamentals, and an engineering specialisation to the solution of complex engineering problems.'),
('b', 'Problem Analysis', 'Identify, formulate, research literature, and analyse complex engineering problems reaching substantiated conclusion using first principles of mathematics, natural sciences, and egnineering sciences.'),
('c', 'Design/development of Solutions', 'Design solutions for complex engineering problems and design system components or processes that meet the specified needs with appropriate consideration for public health and safety, cultural, societal, and environmental considerations.'),
('d', 'Investigation', 'Conduct investigations of complex problems using research-based knowledge and research methods including design of experiments, analysis and interpretation of data, and synthesis of the information to provide valid conclusions.'),
('e', 'Modern Tool Usage', 'Create, select, and apply appropriate techniques, resources, and modern engineering and IT tools including prediction and modelling to complex engineering activities with an understanding of the limitations.'),
('f', 'The engineer and Society', 'Apply reasoning informed by the contextual knowledge to assess societal, health, safety, legal, and cultural issues and the consequent responsibilities relevant to the professional engineering practice.'),
('g', 'Environment and Sustainability', 'Understand the impact of the professional engineering solutions in societal and environmental contexts, and demonstrate the knowledge of, and need for t h e sustainable development.'),
('h', 'Ethics', 'Apply ethical principles and commit to professional ethics and responsibilities and norms of the engineering practice.'),
('i', 'Individual and Team Work', 'Function effectively as an individual, and as a member or leader in diverse teams and in multidisciplinary settings.'),
('j', 'Communication', 'Communicate effectively on complex engineering activities with the engineering community and with society at large, such as, being able to comprehend and write effective reports and design documentation, make effective presentations, and give and receive clear instructions.'),
('k', 'Project Management and Finance', 'Demonstrate knowledge and understanding of t h e engineering and management principles and economic decision-making, and apply these to one’s own work, as a member and leader in a team, to manage projects and in multidisciplinary environments.'),
('l', 'Life-long Learning', 'Recognise the need for, and have the preparation and ability to engage in independent and life-long learning in the broadest context of technological change.');
INSERT INTO `course` (`code`, `course`, `noAU`, `title`, `category`, `proposalDate`) VALUES
('1003', 'CE/CZ', 3, 'Introduction to Computational Thinking', '', NULL),
('1005', 'CE/CZ', 3, 'Digital Logic', '', NULL),
('1006', 'CE/CZ', 3, 'Computer Organisation and Architecture', '', NULL),
('1007', 'CE/CZ', 3, 'Data Structures', '', NULL),
('1011', 'CE/CZ', 3, 'Engineering Mathematics I', '', NULL),
('1012', 'CE/CZ', 3, 'Engineering Mathematics II', '', NULL),
('1013', 'CE/CZ', 2, 'Physics for Computing', '', NULL),
('2001', 'CE/CZ', 3, 'Algorithm', '', NULL),
('2002', 'CE/CZ', 3, 'Object Oriented Design & Programming', '', NULL),
('2003', 'CZ', 3, 'Computer Graphics & Visualization', '', NULL),
('2004', 'CZ', 3, 'Human‐Computer Interaction', '', NULL),
('2005', 'CZ', 3, 'Operating Systems', '', NULL),
('2006', 'CE/CZ', 3, 'Software Engineering', '', NULL),
('2007', 'CZ', 3, 'Introduction to Databases', '', NULL),
('3001', 'CE/CZ', 3, 'Advanced Computer Architecture', '', NULL),
('3002', 'CZ', 3, 'Advanced Software Engineering', '', NULL),
('3005', 'CZ', 3, 'Artificial Intelligence', '', NULL),
('3006', 'CZ', 3, 'Net Centric Computing', '', NULL),
('3007', 'CZ', 3, 'Compiler Techniques', '', NULL),
('4001', 'CE/CZ', 3, 'Virtual and Augmented Reality', '', NULL),
('4003', 'CE/CZ', 3, 'Computer Vision', '', NULL),
('9010', 'CE', 3, 'Introduction to Data Science', '', NULL);
INSERT INTO `academicstaff` (`ID`, `name`, `office`, `phone`, `email`) VALUES
(2, 'Li Fang', NULL, NULL, 'asfli@ntu.edu.sg'),
(9, 'Lin Shang Wei', NULL, NULL, 'shang-wei.lin@ntu.edu.sg'),
(10, 'Nicholas Vun', NULL, NULL, 'aschvun@ntu.edu.sg');
INSERT INTO `appendix` (`course_code`, `ID`, `header`, `description`) VALUES
('1003', '1', 'Assessment for Lab Quizzes and Online tasks', 'You will take 3 MCQs based quizzes. The maximum score is 35.\r\nYou will complete 12 online video with MCQs. The maximum score is 10.'),
('1003', '2', 'Assessment Criteria for Hands-on programming exercise', 'You are required to show working program to lab supervisor in each lab session. The maximum score is 5.\r\nYou will take 2 coding based quizzes related to the programming exercises done in the class. The maximum score is 20.'),
('1003', '3', 'Assessment Criteria for Mini project', 'You will work in team of 2 or 3 students, and demonstrate 1 working program in the form of a mini project. The maximum score is 30 marks, with up to 20 marks be awarded to all team members and 10 marks be awarded to individual member based on following criteria.');
INSERT INTO `assessment` (`course_code`, `ID`, `component`, `weightage`) VALUES
('1003', '1', 'TEL MCQs', 10),
('1003', '2', 'Online MCQs based quizzes', 35),
('1003', '3', 'Hands-on exercises assessment (MCQ based quizzes)', 25),
('1003', '4', 'Mini Project assessment', 30),
('1005', '1', 'Final Examination', 60),
('1005', '2', 'Quizzes', 22),
('1005', '3', 'Lab assessment', 10),
('1005', '4', 'Online tasks', 8),
('1006', '1', 'Final Examination', 60),
('1006', '2', 'Quiz', 40),
('1007', '1', 'Assignment', 20),
('1007', '2', 'Examination', 80),
('1011', '1', 'Final Written Examination', 60),
('1011', '2', 'Quizzes', 32),
('1011', '3', 'Example class (lab) exercise', 8),
('1012', '1', 'Final Examination', 60),
('1012', '2', 'Quiz', 20),
('1012', '3', 'Take Home Assignment', 20),
('1013', '1', 'Quizzes/Reports', 80),
('1013', '2', 'Labs', 20),
('2001', '1', 'Final Examination', 60),
('2001', '2', 'Mid‐Term Quiz', 20),
('2001', '3', 'Example Classes', 20);
INSERT INTO `assessment_category` (`course_code`, `assessment_ID`, `category`) VALUES
('1003', '1', 'individual'),
('1003', '2', 'individual'),
('1003', '3', 'individual'),
('1003', '4', 'individual'),
('1005', '1', 'individual'),
('1005', '2', 'individual'),
('1005', '3', 'individual'),
('1005', '4', 'individual'),
('1006', '1', 'individual'),
('1006', '2', 'individual'),
('1007', '1', 'individual'),
('1007', '2', 'individual'),
('1011', '1', 'individual'),
('1011', '2', 'individual'),
('1011', '3', 'individual'),
('1012', '1', 'individual'),
('1012', '2', 'individual'),
('1012', '3', 'individual'),
('1013', '1', 'individual'),
('1013', '2', 'individual'),
('2001', '1', 'individual'),
('2001', '2', 'individual'),
('2001', '3', 'individual');
INSERT INTO `assessment_gradattr` (`course_code`, `assessment_ID`, `gradAttrID`) VALUES
('1003', '1', 'a'),
('1003', '1', 'b'),
('1003', '1', 'c'),
('1003', '1', 'd'),
('1003', '2', 'a'),
('1003', '2', 'b'),
('1003', '2', 'c'),
('1003', '3', 'a'),
('1003', '3', 'b'),
('1003', '3', 'c'),
('1003', '3', 'd'),
('1003', '3', 'e'),
('1003', '3', 'j'),
('1003', '3', 'l'),
('1003', '4', 'a'),
('1003', '4', 'b'),
('1003', '4', 'c'),
('1003', '4', 'd'),
('1003', '4', 'e'),
('1003', '4', 'i'),
('1003', '4', 'j'),
('1003', '4', 'l');
INSERT INTO `content` (`course_code`, `ID`, `topics`) VALUES
('1003', 0, 'Course Overview and Concepts of Computational Thinking\r\nSolving complex problem using computer - enables the student to work out exactly what to tell the computer to do.'),
('1003', 1, 'Overview of Programming Languages\r\nGraphic programming, high level programming languages\r\n(Python , C, Java, R, Matlab)'),
('1003', 2, 'Basic internal operation of computer\r\nBasic computer organization (Processor, Memory, 1/0) and how a computer execute a program (Machine instructions)\r\n'),
('1003', 3, 'Basic program structure: control constructs and data types\r\nConcepts of data types, variables;\r\nPseude code and flowcharts;\r\nSequences, Selection (if/else), iteration (for/while loop);\r\n'),
('1003', 4, 'CT concept - Abstraction\r\nProblem formulation - reducing something to a very simple set of characteristics to only focusing on the most relevant to the problem. Concept of functions/libraries and data structure\r\n'),
('1003', 5, 'CT concept - Decomposition\r\nBreak a complex problem into smaller and more manageable parts/steps, such that each of these smaller  problems  can then be looked at individually\r\n'),
('1003', 6, 'CT concept- Pattern recognition\r\nLooking for similarities among and within problems, which also enable re-use knowledge of previous similar problems\r\n'),
('1003', 7, 'CT concept - Algorithm\r\nReformulating the problem into series of ordered steps through Identifying, analyzing, and implementing possible solutions with the goal of achieving the most efficient and effective combination of steps and resources. (Some\r\ncommon/useful examples: Sorting and searching)\r\n'),
('1003', 8, 'Limit of computing\r\nAnalysis of Algorithm Complexity to determine how much resources (space and time) are needed to execute an Algorithm in order to achieve code optimization.\r\n'),
('1003', 9, 'Computing Trends\r\nCloud, Edge and Fog computing, Quantum Computers\r\n'),
('1003', 10, 'Social-Ethical Issues and Ramifications of Computing\r\nFairness, Privacy, Sharing, Hacking, software Piracy, Data Protection, Cyberbullying and trolling, Fake news, digital divides, IP/Copyright\r\n'),
('1005', 1, 'Binary integers and arithmetic\r\nUnsigned binary integers. Hexadecimal and Binary?Coded Decimal. Signed formats including sign?magnitude, offset, and 2’s complement. Gray codes and Hamming distances. Binary addition, subtraction, and overview of multiplication.'),
('1005', 2, 'Boolean Variables and Logic\r\nBoolean variables; truth tables for AND, OR and exclusive?OR. Operators; algebra and theorems, including associativity, commutativity distributivity and consensus;\r\nderivation of DeMorgan’s Duals; circuit representations/symbols and multi?input (>2) gates.'),
('1005', 3, 'Combinational circuits\r\nSum?of?Products vs Product?of?Sums; optimisations with respect to gate count, type, and delays; Karnaugh maps and simplification. Application and gate?level design of data multiplexers, demultiplexers, decoders and parity generators. Cascaded designs. Half?adder; full?adder; multi?bit adders, comparators.'),
('1005', 4, 'Implementation technologies\r\nHistory and evolution. Comparison of Transistor?Transistor Logic and Complementary Metal Oxide Semiconductor (CMOS). Consideration of voltages, current, power dissipation, propagation delay, clock rates, noise immunity. Moore’s Law. Active high vs active low signals. Buffers and Schmitt triggers.'),
('1005', 5, 'Digital design using hardware description languages\r\nIntroduction to Verilog (and VHDL) hardware description languages (HDLs). Structural Verilog, module instantiation and design hierarchy. Combinational and Sequential circuits in Verilog. Finite State Machines in Verilog. Overview of Synthesis and \r\nsimulation.'),
('1005', 6, 'Sequential circuits\r\nCombinatorial circuits with feedback; Set?Reset latch; enabled latches; master?slave positive?edge?triggered DType flip?flop; propagation delays, set?up and hold?times,\r\nmeta?stability, race conditions; asynchronous clear and set.'),
('1006', 1, 'Computer Hardware Decomposition\r\nInterconnection of processor, memory, data storage, power supplies and\r\nperipherals.\r\nInput devices such as touch screens, mice, and keyboards and output devices.'),
('1006', 2, 'Data Representation, Memory Allocation and Access\r\nUnsigned Integers. Addressing bytes, words, arrays and structures. Little Endian vs Big Endian. Pointers and pointer arithmetic. Character encoding (DEC 6?bit vs ASCII vs Unicode)'),
('1006', 3, 'Central Processing Unit\r\nConcept of a stored program. Allocation of memory to code and data segments in Von Neumann architecture and dual memory spaces in Harvard architecture with concurrent access. Programmer’s functional models of processors. Status register and flags. Control unit. Fetch?decode?execute cycle.'),
('1006', 4, 'Assembly Programming and Instruction Set Architecture\r\nAssembly?level programming. Addressing modes. Use of Program Counter for instruction and data access. Basic arithmetic and logical operations. Program control instructions. Supervisor vs User modes. Privileged instructions.\r\nInstruction set architectures (ISA) and paradigms. Classifications based on accumulators, registers, load?store and memory?to?memory transfers and operations. Differentiating characteristics of 8?bit to 64?bit ISAs. Fixed?length vs variable?length instructions. Mnemonics, instruction encoding and orthogonality.'),
('1006', 5, 'High-level Software to Low-level Instructions\r\nMapping of high?level language constructs for control flow and data structures to machine?level operations. Including ‘if’, ‘for’ and ‘while’ with pre? and posttest conditions. Using examples of code produced by a ‘C’ compiler.\r\nMechanisms for subroutine/function linkage, including return address, parameter/result passing and local data. Use of Stack Pointer, Stack Frame and Link Register. Position?independent functions.\r\nIntroduction to basic compiler optimization techniques.'),
('1006', 6, 'Computer Memory\r\nMemory Hierarchy (System, Virtual and Storage).\r\nVolatile and non?volatile Random Access Memory.\r\nStatic RAM versus Dynamic RAM.\r\nPrinciples of Cache Memory.\r\nPrinciples of Virtual Memory (Paging versus Segmentation).\r\nPrinciples of accessing semiconductor memories with unidirectional addressing and control buses, and bi?directional data bus.\r\nLatency, bandwidth and interleaving.\r\nOperating principles of magnetic rotating disc drives versus solid?state drives using semiconductor NAND flash drives. Logical versus physical memory\r\naccess. Remapping, reliability and redundancy.\r\nSequential/paged NAND flash memory.'),
('1006', 7, 'Data Transfer and Input/Output (I/O) Techniques\r\nData transfer principles, I/O interfaces, Evolution of data interfacing.\r\nAsynchronous versus synchronous data transfer. Sources of interference.\r\nSerial versus parallel data transfer.\r\nConcept of handshaking and buffering.\r\nProgrammed I/O.\r\nInterrupts and interrupt service routines.\r\nDirect Memory Access (DMA).'),
('1006', 8, 'Computer Arithmetic\r\nPositional number systems. Binary to/from decimal conversion.\r\nSigned integer representation.\r\nFixed?point arithmetic. Carry vs. Overflow.\r\nIEEE 754?2008 standard. Special cases and exceptions. Range and precision.\r\nFloating?point arithmetic.'),
('1006', 9, 'Measuring system performance\r\nComputer performance/speedup/energy equations.\r\nMIPS/FLOPS and limitations.\r\nBenchmarks and relevance or irrelevance to applications.\r\nSoftware tools for code profiling.'),
('1006', 10, 'Towards higher speed\r\nPipelines, co?processors, superscalar and multicores.\r\nSingle Instruction Multiple Data (SIMD) vs. Multiple Instruction Multiple Data (MIMD).\r\nHomogeneous and heterogeneous multiprocessors.'),
('1007', 1, 'Basic Programming Constructs in C Language\r\nC program structure. Syntax and semantics. Intrinsic data types, declarations, operators, assignments, control flow, and simple input/output. Preprocessing.\r\nFunctions. Return values, arguments and parameter passing.\r\nScopes of variables. Concept of side effects.'),
('1007', 2, 'Built?in Data Structures\r\nPointers, pointer operations and pass by reference. One?dimensional and multi?dimensional arrays, and pointers and arrays. Character strings and arrays of strings. Structures, arrays of structures and type definitions.'),
('1007', 3, 'Recursion\r\nBasic recursion. Problem solving with recursion. The Towers of Hanoi. Recursive versus iterative functions.'),
('1007', 4, 'Memory Management\r\nStatic vs dynamic memory allocation. Overview of node-based data structures.'),
('1007', 5, 'Linked Lists\r\nLinked list structures and applications.'),
('1007', 6, 'Stacks and Queues\r\nStack and queue structures and applications. Implementation using linked lists.'),
('1007', 7, 'Tree Structures\r\nOverview of hierarchical/non?linear data structures. Tree structures and applications. Binary vs general trees. Tree traversal: pre-order, in-order, postorder. Binary search trees. AVL tree balancing. Application?specific trees: parse trees.'),
('1011', 1, 'Complex Numbers\r\nArgand diagram, rectangular and polar representations, operations on complex numbers, Euler’s formula, De Moivre’s theorem, nth root of complex numbers.'),
('1011', 2, 'Vectors\r\nDefinition of vectors, vector operations, lines and planes in space, vector form of linear systems, vector spaces, geometric interpretations of linear systems and their solutions.'),
('1011', 3, 'Matrices\r\nDefinition of matrices, matrix operations, scalar products, transpose of a matrix, inverse of a matrix.'),
('1011', 4, 'Systems of Linear Equations\r\nMatrix form of linear systems, elementary row operations, Homogeneous and non-homogeneous systems, Gauss-Jordan eliminations, Cramer\'s rule, applications of linear algebra.'),
('1011', 5, 'Descriptive statistics\r\nTypes of data, presenting data, measures of central tendency, measures of variation.'),
('1011', 6, 'Probability theory\r\nSample space, events, mutually exclusive and independent events, probability rules, conditional probability, Bayes\' theorem.'),
('1011', 7, 'Probability and sampling distributions\r\nRandom variables, expectation and variance of random variables; discrete probability distributions: Bernoulli, Binomial, geometric and Poisson distributions; continuous probability density functions: uniform and normal distributions; sampling distributions, Central Limit Theorem.'),
('1011', 8, 'Inferential statistics\r\nUnbiased point estimates, interval estimates, hypothesis testing of means, z and t tests, means and proportions, Type I, II errors.'),
('1011', 9, 'Experimental and Numerical Methods\r\nLinear Regression. Roots of Equations Newton’s method, and Bisection method. Software tools – e.g. Scilab, Matlab.'),
('1012', 1, 'Precalculus:\r\nLinear functions, polynomial functions, power functions, logarithmic functions, trigonometric functions, floor and ceiling functions, composition of functions, complex numbers.'),
('1012', 2, 'Limits and Continuity:\r\nConcept of limits, one-sided limits and limits at infinity, methods to find limits, Sandwich theorem, definition of continuity and continuity test.'),
('1012', 3, 'Differentiation:\r\nDefinition of derivatives, differentiation rules, implicit differentiation, applications of derivatives, L’Hopital’s rule.'),
('1012', 4, 'Integration:\r\nIndefinite integrals, definite integrals, Riemann sums, Fundamental Theorems of Calculus, techniques of integration, applications of integrals.'),
('1012', 5, 'Ordinary Differential Equations (ODE):\r\nClassification of differential equations, order, linearity. Solutions of first order linear ODE and second order linear ODE with constant coefficients.'),
('1012', 6, 'Sequences and Series:\r\nSequences, series, convergence and divergence, absolute and conditional convergence, tests for convergence, power series.'),
('1012', 7, 'Function approximation:\r\nTaylor’s series and Maclaurin series, interpolation, extrapolation, and curve fitting (regression).'),
('1012', 8, 'Numerical differentiation and integration:\r\nSimpson’s Rule, explicit and implicit methods'),
('1012', 9, 'Fourier Series:\r\nSignal representation in an orthogonal basis, trigonometric Fourier series, complex Fourier series.'),
('1012', 10, 'Fourier Transform:\r\nFourier integral, Fourier transform theorems, inverse Fourier transform.'),
('1013', 1, 'Introduction: what is physics and why physics?\r\nBackground of the course and physics in general'),
('1013', 2, 'Optics and Applications\r\nLight as waves and holography; light as rays and 2D/3D imaging; LiDAR and self‐driving cars;'),
('1013', 3, 'NFC/Electricity and Magnetism\r\nFundamentals of electricity; current, voltage, power and resistance; electro‐magnetism; electric and magnetic fields; example application.'),
('1013', 4, 'EEG/Electrical Potential\r\nFundamentals of measuring electro‐physiological signals; circuits and electrodes for EEG recording; EEG signals and their applications.'),
('1013', 5, 'Electronics/Semiconductor\r\nEnergy bands in solids; electron, hole carriers; P‐N junction; diode and transistor switch; semiconductor integrated circuits fabrication.'),
('2001', 1, 'Introduction to algorithms\r\nWhat is an algorithm? Algorithm design and analysis. Examples of different design: Power function, Sine Function, Maclaurin Series vs CODIC. Mathematical Foundation: Set, Functions, Floor and Ceiling, Power and Logarithm, Summations and Series, Limits, Proof Method.'),
('2001', 2, 'Analysis of Algorithms\r\nTime and space complexities of algorithms. Analyzing basic program constructs. Best case, worst case and average case time complexity analysis. Deducing\r\nrecurrence relations for time complexity of recursive algorithms. Solving elementary recurrence relations. Asymptotic time complexity analysis. Big-Oh, big-\r\nOmega, and big-Theta notations. Common Complexity Classes. Basic techniques for proving asymptotic bounds. Space Complexity. Faster computer or faster algorithms.'),
('2001', 3, 'Searching\r\nIterative and recursive sequential search algorithms. Binary search, its invariance, and complexity. Open and closed address hashing using linear probing and double hashing collision resolution techniques. All algorithms covered are accompanied by asymptotic complexity analysis.'),
('2001', 4, 'Sorting\r\nInsertion-sort, Heap-sort, Quick-sort, Merge-sort, which contrast three approaches: Incremental, Data Structures and Divide-and-Conquer. All algorithms covered are accompanied by asymptotic complexity analysis.'),
('2001', 5, 'Graphs\r\nBasic graph representation methods, adjacency lists, and adjacency matrix, Systematic graph traversals with breadth-first search (BFS) and depth-first search\r\n(DFS) algorithms. A generic backtracking algorithm and its complexity. Maze-Search. Introduction to Greedy algorithms; Dijkstra’s Single-source Shortest Paths algorithm, Correctness proof and complexity of Dijkstra’s algorithm. Minimum Spanning trees and their properties. Greedy algorithm for finding\r\nMinimum Spanning Trees (MSTs) using Prim’s algorithm'),
('2001', 6, 'Basic Computability and Complexity Theory\r\nTractable and intractable problems. Un-computable functions. The Halting Problem. Non-determinism as a computational model. The Classes NP and P. Brute-force and heuristic algorithms Nearest-link-first and shortest-link-first for Travelling Sales Person (TSP) problem.'),
('2001', 7, 'Revision'),
('4003', 1, 'Introduction to computer vision\nBackground and applications;'),
('4003', 2, 'Principles of Camera Systems\nImaging systems, basic thin?lens optics, digitization, image representation;');
INSERT INTO `contentattdetails` (`course_code`, `content_ID`, `details1`, `details2`, `rowspan`) VALUES
('1003', 0, '0.5', 'RPi Familiarization Scratch based graphical programming\r\n(1 week)', 2),
('1003', 1, '0.5', '', 0),
('1003', 2, '1', 'Python on RPi\r\n(1 week)', 1),
('1003', 3, '3', 'Python Programming Exercises/Quiz\r\n(3 weeks)', 1),
('1003', 4, '2', 'Library calls & function\r\n(2 weeks)\r\n', 1),
('1003', 5, '1', 'Project - Flow Chart Design\r\n(1 week)', 1),
('1003', 6, '1', 'Project - Coding\r\n(1 week)', 1),
('1003', 7, '2', 'Project - Coding/Quiz\r\n(2 weeks)', 1),
('1003', 8, '1', 'Project - Demo and assessment\r\n(1 week)', 1),
('1003', 9, '0.5', 'Project- Demo and assessment\r\n(1 Week)', 2),
('1003', 10, '0.5', '', 0),
('1005', 1, '3', '1', 1),
('1005', 2, '3', '2', 1),
('1005', 3, '4', '2', 1),
('1005', 4, '2', '0', 1),
('1005', 5, '5', '3', 1),
('1005', 6, '3', '2', 1),
('1006', 1, '1', '0', 1),
('1006', 2, '1', '1', 1),
('1006', 3, '2', '1', 1),
('1006', 4, '5', '3', 1),
('1006', 5, '4', '2', 1),
('1006', 6, '4', '2', 1),
('1006', 7, '4', '2', 1),
('1006', 8, '3', '2', 1),
('1006', 9, '1', '0', 1),
('1006', 10, '1', '0', 1),
('1007', 1, '1', '2', 1),
('1007', 2, '5', '10', 1),
('1007', 3, '1', '2', 1),
('1007', 4, '1', '2', 1),
('1007', 5, '1', '2', 1),
('1007', 6, '1', '2', 1),
('1007', 7, '3', '4', 1),
('1011', 1, '3', '1', 1),
('1011', 2, '3', '2', 1),
('1011', 3, '3', '1', 1),
('1011', 4, '4', '2', 1),
('1011', 5, '2', '1', 1),
('1011', 6, '3', '2', 1),
('1011', 7, '3', '2', 1),
('1011', 8, '2', '1', 1),
('1011', 9, '3', '1', 1),
('1012', 1, '1', '2', 1),
('1012', 2, '2', '2', 1),
('1012', 3, '3', '2', 1),
('1012', 4, '4', '2', 1),
('1012', 5, '3', '1', 1),
('1012', 6, '2', '2', 1),
('1012', 7, '4', '2', 1),
('1012', 8, '2', '2', 1),
('1012', 9, '2', '2', 1),
('1012', 10, '3', '1', 1),
('1013', 1, '2', '0', 1),
('1013', 2, '6', '2', 1),
('1013', 3, '6', '2', 1),
('1013', 4, '6', '2', 1),
('1013', 5, '6', '2', 1),
('2001', 1, '2', '1', 1),
('2001', 2, '5', '4', 1),
('2001', 3, '2', '3', 1),
('2001', 4, '6', '5', 1),
('2001', 5, '6', '5', 1),
('2001', 6, '2', '1', 1),
('2001', 7, '2', '', 1),
('4003', 1, '1', '0', 1),
('4003', 2, '2', '1', 1);
INSERT INTO `contacthour` (`course_code`, `lecture`, `tel`, `tutorial`, `lab`, `exampleClass`) VALUES
('1003', 0, 13, NULL, NULL, 26),
('1005', NULL, 26, 13, 10, NULL),
('1006', 26, NULL, 13, 8, NULL),
('1007', 13, 0, NULL, NULL, 24),
('1011', 26, NULL, 13, NULL, 8),
('1012', 20, 6, NULL, NULL, 8),
('1013', 26, NULL, 0, 8, NULL),
('2001', 27, NULL, 11, NULL, 8),
('2002', 24, NULL, 10, 10, NULL),
('2003', 26, NULL, 12, 10, NULL),
('2004', 26, NULL, 12, NULL, 10),
('2005', 26, NULL, 12, 8, NULL),
('2006', 26, NULL, 10, 2, NULL),
('2007', 26, NULL, 10, 0, NULL),
('3001', 26, 10, NULL, 5, NULL),
('3002', 26, NULL, 13, 2, NULL),
('3005', 26, NULL, 13, 3, NULL),
('3006', 26, NULL, 13, 8, NULL),
('3007', 26, NULL, 13, 8, NULL),
('4001', 0, NULL, 0, 0, NULL),
('4003', 0, NULL, 0, 0, NULL),
('9010', 26, NULL, 13, 10, NULL);
INSERT INTO `contentatt` (`course_code`, `att1`, `att2`) VALUES
('1003', 'LAMS (Hours)', 'Example Class (2-hr session)'),
('1005', 'Lectures\r\n(Hours)', 'Tutorials\r\n(Hours)'),
('1006', 'Lectures\r\n(Hours)', 'Tutorials\r\n(Hours)'),
('1007', 'Lectures\r\n(Hours)', 'Example Classes\r\n(Hours)'),
('1011', 'Lectures/TEL\r\n(Hours)', 'Tutorials\r\n(Hours)'),
('1012', 'Lectures\r\n(Hours)', 'Tutorials and/or Example Classes\r\n(Hours)'),
('1013', 'Lectures\r\n(Hours)', 'Labs\r\n(Hours)'),
('2001', 'Lectures\r\n(Hours)', 'Tutorials and/or Example Classes\r\n(Hours)'),
('2002', '', ''),
('2003', 'Lectures (Hours)', 'Tutorials\r\n(Hours)'),
('2004', '', ''),
('2005', '', ''),
('2006', '', ''),
('2007', '', ''),
('3001', '', ''),
('3002', '', ''),
('3005', '', ''),
('3006', '', ''),
('3007', '', ''),
('4001', 'Lectures (Hours)', 'Tutorials (Hours)'),
('4003', 'Lectures (Hours)', 'Tutorials (Hours)'),
('9010', '', '');
INSERT INTO `gradattr_percent` (`course_code`, `gradAttrID`, `percentage`) VALUES
('1003', 'a', 100),
('1003', 'b', 100),
('1003', 'c', 100),
('1003', 'd', 100),
('1003', 'e', 75),
('1003', 'f', 0),
('1003', 'g', 0),
('1003', 'h', 0),
('1003', 'i', 50),
('1003', 'j', 25),
('1003', 'k', 0),
('1003', 'l', 50),
('1005', 'a', 0),
('1005', 'b', 0),
('1005', 'c', 0),
('1005', 'd', 0),
('1005', 'e', 0),
('1005', 'f', 0),
('1005', 'g', 0),
('1005', 'h', 0),
('1005', 'i', 0),
('1005', 'j', 0),
('1005', 'k', 0),
('1005', 'l', 0),
('1006', 'a', 0),
('1006', 'b', 0),
('1006', 'c', 0),
('1006', 'd', 0),
('1006', 'e', 0),
('1006', 'f', 0),
('1006', 'g', 0),
('1006', 'h', 0),
('1006', 'i', 0),
('1006', 'j', 0),
('1006', 'k', 0),
('1006', 'l', 0),
('1007', 'a', 0),
('1007', 'b', 0),
('1007', 'c', 0),
('1007', 'd', 0),
('1007', 'e', 0),
('1007', 'f', 0),
('1007', 'g', 0),
('1007', 'h', 0),
('1007', 'i', 0),
('1007', 'j', 0),
('1007', 'k', 0),
('1007', 'l', 0),
('1011', 'a', 0),
('1011', 'b', 0),
('1011', 'c', 0),
('1011', 'd', 0),
('1011', 'e', 0),
('1011', 'f', 0),
('1011', 'g', 0),
('1011', 'h', 0),
('1011', 'i', 0),
('1011', 'j', 0),
('1011', 'k', 0),
('1011', 'l', 0),
('1012', 'a', 0),
('1012', 'b', 0),
('1012', 'c', 0),
('1012', 'd', 0),
('1012', 'e', 0),
('1012', 'f', 0),
('1012', 'g', 0),
('1012', 'h', 0),
('1012', 'i', 0),
('1012', 'j', 0),
('1012', 'k', 0),
('1012', 'l', 0),
('1013', 'a', 0),
('1013', 'b', 0),
('1013', 'c', 0),
('1013', 'd', 0),
('1013', 'e', 0),
('1013', 'f', 0),
('1013', 'g', 0),
('1013', 'h', 0),
('1013', 'i', 0),
('1013', 'j', 0),
('1013', 'k', 0),
('1013', 'l', 0),
('2001', 'a', 0),
('2001', 'b', 0),
('2001', 'c', 0),
('2001', 'd', 0),
('2001', 'e', 0),
('2001', 'f', 0),
('2001', 'g', 0),
('2001', 'h', 0),
('2001', 'i', 0),
('2001', 'j', 0),
('2001', 'k', 0),
('2001', 'l', 0),
('2003', 'a', 0),
('2003', 'b', 0),
('2003', 'c', 0),
('2003', 'd', 0),
('2003', 'e', 0),
('2003', 'f', 0),
('2003', 'g', 0),
('2003', 'h', 0),
('2003', 'i', 0),
('2003', 'j', 0),
('2003', 'k', 0),
('2003', 'l', 0),
('2005', 'a', 0),
('2005', 'b', 0),
('2005', 'c', 0),
('2005', 'd', 0),
('2005', 'e', 0),
('2005', 'f', 0),
('2005', 'g', 0),
('2005', 'h', 0),
('2005', 'i', 0),
('2005', 'j', 0),
('2005', 'k', 0),
('2005', 'l', 0),
('4001', 'a', 0),
('4001', 'b', 0),
('4001', 'c', 0),
('4001', 'd', 0),
('4001', 'e', 0),
('4001', 'f', 0),
('4001', 'g', 0),
('4001', 'h', 0),
('4001', 'i', 0),
('4001', 'j', 0),
('4001', 'k', 0),
('4001', 'l', 0),
('4003', 'a', 0),
('4003', 'b', 0),
('4003', 'c', 0),
('4003', 'd', 0),
('4003', 'e', 0),
('4003', 'f', 0),
('4003', 'g', 0),
('4003', 'h', 0),
('4003', 'i', 0),
('4003', 'j', 0),
('4003', 'k', 0),
('4003', 'l', 0);
INSERT INTO `criteria` (`course_code`, `appendixID`, `ID`, `header`, `fail`, `pass`, `high`) VALUES
('1003', '3', '1', 'Demonstrate (including explanation) the use of CT concepts in the implementation of the project, and the implementation results.\r\n\r\n(15 marks - for all team members)', 'Demonstrated less than 40% of the functionalities according to the specifications.', 'Demonstrated 40% to 80% of the functionalities according to the specifications.', 'Demonstrated more than 80% of the functionalities according to the specifications.'),
('1003', '3', '2', 'Project demonstration and presentation \r\n\r\n(5 marks - for all team members)', 'Poor content and slide Design. Presentation sequence is not clear or logical.', 'Adequate contents, average slide design. Presentation is clear and logical.', 'Comprehensive contents, substantial effort in slide design. Presentation is clear and logical, and is able to highlight major outcomes.'),
('1003', '3', '3', 'Individual assessment\r\n\r\n(10 marks)', 'Unable to explain individual work performed. Unable to understand and answer questions.', 'Reasonable depth of explanation on individual work performed. Able to understand and answer some questions.', 'Offer good explanation on individual work performed. Able to understand and answer most questions.');
INSERT INTO `formativefeedback` (`course_code`, `description`) VALUES
('1003', 'For online tasks, immediately after you submitted the answers, you will see your scores, your answers, the correct answers, feedback on your incorrect answers, and explanations for the correct answers. For online and laboratory quizzes, individual feedback will be provided to students through evaluation of their submissions. Quiz answers will be discussed in the example class. You will also see the average scores of the other students in the same cohort.\r\n\r\nFor lab assessments, you will be given verbal feedback during your demonstrations of circuits.');
INSERT INTO `instructor` (`course_code`, `academicStaffID`) VALUES
('1003', 2),
('1003', 9),
('1003', 10);
INSERT INTO `approach` (`course_code`, `ID`, `approach`, `description`) VALUES
('1003', '1', 'TEL (Online Video)', 'Topics will be delivered as a series of online videos lectures, and you will be provided reference reading materials for self-study to achieve LO 1 to LO 4.'),
('1003', '2', 'Example Class (Face-to-face)', 'The example class will be used as seminar sessions for students to clarify the contents of the online topic, as well as hands-on sessions to equip students with practical knowledge on coding, and on the design and implementation of a mini project to achieve LO 1 to LO 4.');
INSERT INTO `learningoutcomes` (`course_code`, `ID`, `description`) VALUES
('1003', 1, 'Describe the internal operation of a basic processor, how a program is executed by a computer and computing trends.'),
('1003', 2, 'Code basic programs based on the programming language used in the course.'),
('1003', 3, 'Formulate a problem and express its solution in such a way that a computer can effectively carry it out. (i.e. equip you with CT skills)'),
('1003', 4, 'Apply the CT concepts on case studies/problem-based scenarios through hands-on practice of the CT processes.'),
('1005', 1, 'Represent integers in binary.'),
('1005', 2, 'Recognise and use elementary logic operators.'),
('1005', 3, 'Analyse a given Boolean expression and optimize it for efficient implementation.'),
('1005', 4, 'Design and implement simple combinational and sequential circuits.'),
('1005', 5, 'Use Verilog to design hardware systems based on the above principles.'),
('1006', 1, 'Describe and analyse the basic factors influencing computer organization and performance.'),
('1006', 2, 'Describe the basic operation of the CPU and how programs are executed on a computer.'),
('1006', 3, 'Describe and explain how high?level programming constructs are implemented with low-level instructions.'),
('1006', 4, 'Describe, analyse and evaluate the characteristics of different memory subsystems.'),
('1006', 5, 'Describe and analyse basic input/output techniques.'),
('1006', 6, 'Describe and evaluate the different number representations and basic arithmetic operations.'),
('1007', 1, 'Design and implement simple C programs using basic programming constructs.'),
('1007', 2, 'Design and implement pointers, arrays, character strings and structures in C.'),
('1007', 3, 'Design and implement recursive functions in C.'),
('1007', 4, 'Design and implement dynamic memory allocation in C.'),
('1007', 5, 'Design and implement linked lists, stacks and queues in C.'),
('1007', 6, 'Design and implement tree structures in C.'),
('1011', 1, 'Interpret matrices, determinants, vectors and the various matrix and vector operations.'),
('1011', 2, 'Apply linear algebra to solve practical problems in engineering and science.'),
('1011', 3, 'Present data using appropriate graphs and charts.'),
('1011', 4, 'Apply probability and statistics to understand random phenomenon and make appropriate\r\ninferences.'),
('1011', 5, 'Apply numerical methods for data assessment and analysis.'),
('1012', 1, 'Apply analytical and theoretical skills to solve mathematical problems.'),
('1012', 2, 'Apply calculus to solve practical problems in engineering and science.'),
('1012', 3, 'Analyze convergence property of Sequences and Series.'),
('1012', 4, 'Apply Fourier methods to analyse signals.'),
('1013', 1, 'Explain basic knowledge (definitions, principles and techniques) of all the selected topics;'),
('1013', 2, 'Identify the contribution of physics in some computing systems;'),
('1013', 3, 'Discuss the interdisciplinary nature of many innovative systems;'),
('1013', 4, 'Reflect the importance and the recent progress of Physics, to prepare to propose novel physicscomputing\r\nsystems in the future.'),
('2001', 1, 'Conduct complexity analysis of basic algorithms.'),
('2001', 2, 'Design and analyse algorithms using the suitable strategies (e.g. incremental, divide and conquer, data‐structure, and greedy approaches) to solve a problem.'),
('2001', 3, 'Compare the efficiencies of different algorithms for the same problem (e.g. searching, sorting or graph traversal).'),
('2001', 4, 'Describe various heuristic problem‐solving methods.'),
('2001', 5, 'Implement algorithms from pseudo code into real code.'),
('2002', 1, 'Explain the concepts of object-oriented methodology and demonstrate it in developing software programs.'),
('2002', 2, 'Design simple software programmes using good design principles with consideration for reuse and maintainability, to solve problems.'),
('2002', 3, 'Implement a given design in Java and/or C++.'),
('2003', 1, 'Use geometry and colors as ways to visualize data beyond mathematical formulas.'),
('2003', 2, 'Represent geometric shapes and motions by analytical functions and algorithmic procedures.'),
('2003', 3, 'Use spatial visualization skills to perform 3D rotations and other transformations and motions of geometric objects.'),
('2003', 4, 'Use a common personal computer and open source software to solve complex computer graphics problems.'),
('2004', 1, 'Articulate the rationale for user‐centric interface design;'),
('2004', 2, 'Describe and apply methods and principles for creating and evaluating good user interfaces;'),
('2004', 3, 'Implement important steps in a UI design process, with focus on creating lo‐fidelity and highfidelity design prototypes;'),
('2004', 4, 'Elaborate on the different sensing and actuation modalities of both humans and existing user interfaces;'),
('2004', 5, 'Use and explain various concepts and terminology that is widely used in the UI/UX community.'),
('2005', 1, 'Explain fundamental concepts and principles of modern operating systems;'),
('2005', 2, 'Identify the functions and services provided by each component of an operating system;'),
('2005', 3, 'Describe how processes, memory, files, and I/O devices are managed in an operating system;'),
('2005', 4, 'Analyze and evaluate algorithms that implement core functions of major operating system components; and'),
('2005', 5, 'Implement functions for operating system components in accordance to design requirements using the concepts and principles learnt in this course.'),
('2006', 1, 'Participate in all stages of the Software Development Life Cycle for a medium‐size software project to deliver the required work products.'),
('2006', 2, 'Elicit and specify requirements clearly and correctly.'),
('2006', 3, 'Use good software design concepts and considerations.'),
('2006', 4, 'Design and carry out test activities to verify that requirements have been met.'),
('2006', 5, 'Perform simple project management of a medium‐size software project.'),
('2007', 1, 'Explain the importance of, and uses for, databases within organizations;'),
('2007', 2, 'Design a basic relational database management system (DBMS) for storing and analyzing datasets of medium complexity;'),
('2007', 3, 'Formulate basic relational database queries and execute these in order to search and analyse underlying data;'),
('2007', 4, 'Ensure data integrity through enacting the process of database normalization;'),
('2007', 5, 'Describe the usage of indexing to improve query efficiency;'),
('2007', 6, 'Explain the significance of XML and JSON in today\'s world;'),
('3001', 1, 'Interpret the performance of a processor based on metrics such as execution speed and power.'),
('3001', 2, 'Design processors that achieve the desired performance in a step by step manner.'),
('3001', 3, 'Design and describe pipeline data‐path for performance enhancement.'),
('3001', 4, 'Predict the challenges of realizing different kinds of parallelism (such as instruction, data and thread level) and leverage them for performance advancement for the present, and in the future.'),
('3001', 5, 'Design cache that takes into account the importance of efficient memory design and virtual memory to overcome memory wall.'),
('3001', 6, 'Develop high performance programs by taking into consideration data‐path, memory design and parallelism at instruction, data and thread level.'),
('3002', 1, 'Describe the software engineering management and quality processes, their purpose and importance'),
('3002', 2, 'Apply advanced software engineering management techniques'),
('3002', 3, 'Use appropriate methods and tools for the development and management of real world reliable software systems'),
('3002', 4, 'Conduct yourself in an ethically responsible way expected of software professionals to ensure public safety'),
('3005', 1, 'Explain what Artificial Intelligence is about and appreciate its relevance to Computer Science and importance for IT and society.'),
('3005', 2, 'Describe the human cognitive organisation in problem solving and appreciate the ethics involved in the application of AI techniques.'),
('3005', 3, 'Formulate a problem, evaluate its complexity and apply the appropriate state space search algorithms to solve it'),
('3005', 4, 'Build knowledge‐based systems using techniques relating to computer‐based representation and manipulation of complex information, and formal logic inference and reasoning algorithms.'),
('3005', 5, 'Discuss several advance AI applications and topics such as several advanced AI applications and topics such as intelligent agents, constraint satisfaction, game playing, and applied expert systems.'),
('3006', 1, 'Identify and describe the basic concepts, reference models, and protocols of modern computer networks.'),
('3006', 2, 'Illustrate from layered point of view, the fundamental components and mechanisms that internet is operated on.'),
('3006', 3, 'Identify a set of World Wide Web technologies and applications that enable efficient client‐server interaction and information exchange.'),
('3006', 4, 'Describe and analyse practical implementation considerations when designing and developing network based systems and applications.'),
('3006', 5, 'Implement with practical considerations some of the network modules as well as web based systems and applications'),
('3007', 1, 'Identify the steps and techniques involved in programming language translation.'),
('3007', 2, 'Use regular expressions and context free grammars to describe languages, and employ opensource tools to create recognisers for them.'),
('3007', 3, 'Explain the concept of abstract syntax trees and techniques for name binding analysis and type checking.'),
('3007', 4, 'Explain how a compiler generates machine code, and use simple data flow analysis techniques for code optimisation.'),
('3007', 5, 'Apply ideas, techniques, and skills learnt to general software design.'),
('4001', 1, 'Explain what is virtual and augmented reality and how it can simulate and interact with the realworld;'),
('4001', 2, 'Identify typical problems associated with virtual and augmented reality;'),
('4001', 3, 'Describe some examples of real?world applications;'),
('4001', 4, 'Design and implement a working system using available tools based on the concepts and mathematics learnt in this course'),
('4003', 1, 'Describe the fundamental computer vision concepts;'),
('4003', 2, 'Explain the advantages and disadvantages of the common computer vision techniques;'),
('4003', 3, 'Implement the basic computer vision algorithms;'),
('4003', 4, 'Apply computer vision techniques to solve simple real problems.'),
('9010', 1, 'Identify and apply data analysis techniques to different data problems.'),
('9010', 2, 'Implement data science techniques with Python.'),
('9010', 3, 'Analyze and solve real‐world data science projects.'),
('9010', 4, 'Engage more professionally in written and oral scientific communication,'),
('9010', 5, 'Work cohesively and effectively in teams.');
INSERT INTO `assessment_lo` (`course_code`, `assessment_ID`, `lo_ID`) VALUES
('1003', '1', 1),
('1003', '1', 2),
('1003', '2', 2),
('1003', '3', 2),
('1003', '4', 2),
('1003', '1', 3),
('1003', '2', 3),
('1003', '3', 3),
('1003', '4', 3),
('1003', '1', 4),
('1003', '2', 4),
('1003', '3', 4),
('1003', '4', 4);
INSERT INTO `lo_gradattr` (`course_code`, `lo_ID`, `gradAttrID`) VALUES
('1003', 1, 'a'),
('1003', 1, 'b'),
('1003', 1, 'c'),
('1003', 1, 'd'),
('1003', 2, 'a'),
('1003', 2, 'b'),
('1003', 2, 'c'),
('1003', 2, 'd'),
('1003', 2, 'e'),
('1003', 2, 'i'),
('1003', 3, 'a'),
('1003', 3, 'b'),
('1003', 3, 'c'),
('1003', 3, 'd'),
('1003', 3, 'e'),
('1003', 3, 'i'),
('1003', 3, 'j'),
('1003', 3, 'l'),
('1003', 4, 'a'),
('1003', 4, 'b'),
('1003', 4, 'c'),
('1003', 4, 'd'),
('1003', 4, 'e'),
('1003', 4, 'l');
INSERT INTO `objectives` (`course_code`, `courseAims`) VALUES
('1003', 'Computational thinking (CT) is a problem solving process with the aid of computer; i.e. formulating a problem and expressing its solution in such a way that a computer can effectively carry it out. It includes a number of characteristics, such as breaking a problem into small and repetitive ordered steps, logically ordering and analyzing data and creating solutions that can be effectively implemented as algorithms running on computer. As such, computational thinking is essential not only to the Computer Science discipline, it can also be used to support problem solving across all disciplines, including math, science, engineering, business, finance and humanities.\r\nThe aim of this course is hence to take students with no prior experience of thinking in a computational manner to a point where they can derive simple algorithms and code the programs to solve some basic problems in their domain of studies. In addition, the course will include topics to appreciate the internal operations of a processor, and raise awareness of the socio-ethical issues arising from the pervasiveness of computing technology.'),
('1005', 'This course aims to develop your ability to analyse and design digital circuits. The design and behavior of modern digital equipment (e.g. mobile phones and personal computers) are based on functions of binary variables. This course provides you the knowledge to analyse the theoretical characteristics and the skills required for practical technology?driven implementations of digital circuits.\r\nThis course provides an introductory perspective of digital circuits design. It is relevant for anyone pursuing a career in the ICT industry – including those in digital systems, computer architecture and microprocessor based systems design.'),
('1006', 'This core engineering course aims to develop your understanding of the basic architectures of a computer system along with the organization and operation of common peripherals and memory sub?systems around such computing systems. It also reveals how such architectures influence the design and implementation of low?level instructions and high level programming constructs.\r\nUnderstanding of low level architectural aspect is important to later appreciation of more advanced topics in computer system and architecture discussed in CE2007, CE3001, CZ3001 and CE3003, which this course is a pre?requisite to.'),
('1007', 'This core programming course aims to develop your understanding in data structures such as linked lists, stacks, queues and trees that are important for building efficient programs in C programming language, and are essential for future programming and software engineering courses.'),
('1011', 'This course aims to develop your foundation in engineering mathematics, particularly in linear algebra and probability and statistics.\r\nThis course provides the basic engineering mathematics foundation that is necessary for anyone pursuing a computer science and engineering degree course.'),
('1012', 'This course aims to provide the appropriate mathematical background pertaining to basic calculus, ordinary differential equations, Fourier transform, numerical differentiation and integration methods. It is a pre?requisite for other courses, including CE2001 and CZ2001, CE2004, and CE3005 and this mathematical knowledge is essential for solving many computer science and computer engineering problems.'),
('1013', 'This course aims to show the fundamental role of physics in building up computing systems and computer applications. You will be exposed to various selected physics topics (Optics, Electrics, Electronics, and Magnetism), with which, many useful physics?computing systems have been developed and changed our daily life. This course serves you as an introductory general education course to encourage you for interdisciplinary thinking and exploration.'),
('2001', 'This core engineering course aims to develop your knowledge, understanding and skills about algorithms, including: (1) methods and techniques to design and implement algorithms; (2) methods and techniques to analyse the correctness and resource requirements (mainly the time and space complexities) of algorithms. Because algorithms are essential to both Computer Engineering (CE) and\r\nComputer Science (CS), this course has vital importance for learning other courses in CE or CS, and shall prepare you for future careers in the science and technology of computing.'),
('2002', 'The object‐oriented paradigm to the design of software is one major successful approach to address complexity and maintainability issues in software systems. We want students to establish an object-oriented mindset and to gain valuable insights into how software can be developed using the object-oriented approach. This course should not be interpreted to be a pure programming language course. Rather, the programming language serves to illustrate, via practical examples, the concepts learnt in\r\nthe course.\r\n\r\nAs a student of this course, you will learn essential object‐oriented concepts such as encapsulation, the separation of design from implementation; the use of inheritance and polymorphism. You will discover how to describe these concepts using appropriate UML diagrams. Finally, you will also learn good design principles for reuse, and to realise these principles using object‐oriented programming languages such as Java and/or C++.'),
('2003', 'This course aims to introduce methods for visualizing data, especially in cases where simple plots and diagrams are insufficient. Information visualization and graphics rendering of abstract data involves various mathematical models, and has become important in modern science and technology. It has applications across many disciplines including interior and architectural designs, as well as engineering software systems that employ graphical presentations as part of their user interfaces. You will be immersed into “visual mathematics”, i.e. you will learn how to see geometry and colours beyond mathematical formulas and how to represent geometric shapes and motions by analytic functions and algorithmic procedures. You will develop spatial visualization skills which will permit you to perform 3D rotations and other transformations of geometric objects. You will also learn how a common personal computer, freeware and de‐facto standard software can be used for solving complex computer graphics problems. The course requires\r\nknowledge of engineering math and analytic geometry.'),
('2004', 'This course aims to provide an introduction to human‐computer interaction, with an overarching goal of inculcating into you the habit of adopting a user‐centric perspective on usability when designing, evaluating and innovating new user interfaces. More specifically, the objectives are to get you to: (a) appreciate and understand the significance of considering usability issues in interface development, including user requirements, measurements and various usability tests; (b) acquire vocabulary to frame and articulate HCI issues and considerations for different computing applications; (c) learn first principles in user interface design and develop basic ability to apply design considerations to both current and future interface modalities; (d) obtain a perspective of how HCI needs to be aligned with human thought processes and physical abilities, and (e) be aware of the large range of user interfaces in society today, and appreciate how HCI design is applied in various sectors of the computing industry.'),
('2005', 'This course aims to develop your understanding of fundamental concepts and principles of modern operating systems, and to build your knowledge on the design and implementation of main operating system components.\r\n\r\nThe course covers the following main components of an operating system: process management, memory management, file systems, and I/O.'),
('2006', 'This course aims to equip SCSE students with foundation knowledge on issues and techniques required for the design and implementation of quality software.\r\nYou will have the necessary knowledge and skills to delve deeper into systems analysis (CZ3003) and advanced topics in Advanced Software Engineering (CZ3002).'),
('2007', 'Database management systems (DBMS) are software systems that control the creation, maintenance, and use of databases, i.e., organized collections of data. Relational DBMS (RDBMS) are incredibly ubiquitous today ‐‐ they underlie technology used by most people every day if not every hour. RDBMS reside behind a huge fraction of websites; they are a crucial component of telecommunications systems, banking systems, video games, and just about any other software system or electronic device that maintains some amount of persistent information. As a consequence, it is important that we equip you with knowledge of design of relational databases and the use of RDBMS for applications. This introductory course serves the purpose.'),
('3001', 'This course aims to develop your understanding in the fundamental concepts and in‐depth understanding of design principles of a computer system by addressing key issues in instruction set design, micro‐architecture design along with the interaction of hardware components in a computer system. This course aids you to acquire necessary skills for analysing and estimating the\r\nperformance of computing systems, and to design high‐performance computing systems. In this course, there is a strong emphasis on the study of techniques for improving the power efficiency of single and multiple processor systems. Students will complete this course with a useful appreciation and understanding of processor design issues relating to simplicity of implementation, performance‐enhancement techniques, and power‐reduction methods.'),
('3002', 'Building upon software engineering and design concepts covered in Software Engineering (CZ2006), this course aims to introduce advanced software engineering management topics to you including Quality Management, Project Management, Configuration Management, and Maintenance, according to the Software Engineering Body of Knowledge.'),
('3005', 'Computer / software engineers are involved in effective and efficient building of knowledge agent systems that satisfy the requirements of users; possibly software for intelligent embedded and intelligent information systems. General awareness of theory, knowledge, and practice in all phases of the knowledge based systems and representation techniques for problem solving are necessary for those of you who wants to get into the field artificial intelligence. These are advanced intelligent systems that are finding wide spread applications in finance, banking, manufacturing industries.'),
('3006', 'This course aims to give a broad knowledge of modern networking technologies and network‐based applications, computing systems, and software. The course will cover the background and history, basic concepts and components, mechanisms and protocols of computer networks and Internet. The scope will extend to the World Wide Web computing and information exchange framework built on top of Internet, and introduce key technologies that enable the client–server web application modes. You are expected to finish the course with necessary knowledge and understanding of the rationale in modern computer networking and network centric system and application design.\r\nLectures will focus on concepts, theory, technology, and practical examples. We will supplement lectures with tutorials, laboratory experiments, course assignments, and e‐learning modules. E‐learning modules are intended to encourage self‐learning, particularly on extended knowledge of the core of this course. Tutorials will focus on topics and knowledge covered in the lectures for you to better understand them. Lab experiments and assignments will enhance your practical programming experience and hands on skills.\r\n\r\nThis course introduces a broad knowledge of the structure, implementation, and theoretical underpinning of modern networking technologies and network based applications.'),
('3007', 'The aim of this course is to give you an understanding of compilers and the techniques involved in programming language translation. Compilers are omnipresent in the life of a software developer. Their design and implementation have been studied for more than 50 years, leading to a well-developed body of theory that has been successfully applied in practice many times over. Many techniques originally developed in the context of compiler design (such as regular expressions, parsing and abstract syntax trees) have taken on a life of their own and are widely used in other contexts as well.\r\n\r\nWhile it is not likely that you will ever be involved in the development of a compiler for a general programming language during their professional career, domain specific languages are becoming increasingly important. Implementing an interpreter or a compiler for such a language requires an understanding of compiler techniques. Consequently, it is important that you have at least a high‐level grasp of the structure of a compiler and the problems arising during compilation, and that you acquire the most important techniques used to tackle them. Last but not least, a compiler is a non‐trivial piece of software; understanding its structure and inner workings is an excellent way for students to become better software engineers.'),
('4001', 'Virtual and augmented reality is becoming a powerful technology for engineers to design and implement applications ranging from manufacturing and medical to media and entertainment. Virtual reality refers to techniques that build imaginary worlds in computers. Augmented reality adds cues by overlaying computer?generated images onto the real world. An understanding of the hardware, software and algorithms for virtual and augmented reality allows engineers like you to push the limits of the technology and develop useful applications.\r\nThe prerequisite of this course is CZ2003 Computer Graphics and Visualization, which covers fundamentals of 3D modelling and animation.'),
('4003', 'This course aims to introduce you basic concepts and technologies of computer vision, and develop\nskills to implement widely used algorithms to process real vision tasks. This course presents you with\ndigital image acquisition, representation, processing, recognition, and 3D reconstruction, to gain\nunderstanding of algorithm/system design, analytical tools, and practical implementations of various\ncomputer vision applications. You will be equipped with fundamental knowledge, practical skills and\nthe insights for future development in this area.'),
('9010', 'This course aims to develop skills in data science. In 2012, the Harvard Business School called data scientist the sexiest job of the 21st century. Why has data scientist become a most in‐demand job? Today massive amounts of data are available in all areas of science, government and industry. Exploited sensibly, these raw data can significantly improve the efficiency of research, services and industries in as many fields as healthcare, engineering, finance, telecommunications or urban development just to name a few.\r\nThis course is designed for students who recognize the value of data science, but are not majoring from the School of Computer Science and Engineering (SCSE) and certain other programmes (see Appendix 3). The course provides you with an understanding of the fundamentals of data science and the practical skills set required to be a data scientist, including the design and implementation of basic techniques.');
INSERT INTO `prerequisite` (`course_code`, `prerequisiteCode`) VALUES
('2001', '1007'),
('2002', '1007'),
('2003', '1011'),
('2005', '1006'),
('2005', '1007'),
('2006', '2002'),
('2007', '2001'),
('3001', '1006'),
('3002', '2006'),
('3006', '1006'),
('3006', '2002'),
('3007', '2001'),
('3007', '2006'),
('4001', '2003'),
('9010', '1003'),
('9010', '1011');
INSERT INTO `reference` (`course_code`, `ID`, `description`) VALUES
('1003', '1', 'The Practice of Computing using Python; William Punch and Richard Enbody, Pearson, 2017.'),
('1003', '2', 'Introduction to Computation and Programming Using Python: With Application to Understand Data; (2nd Ed) John V. Guttag, MIT Press Ltd, 2016.'),
('1003', '3', 'https://edu.google.com/resources/programs/exploring-computational-thinking/');
INSERT INTO `rubrics` (`course_code`, `assessment_ID`, `description`) VALUES
('1003', '1', 'See appendix 1'),
('1003', '2', 'See appendix 1'),
('1003', '3', 'See appendix 2'),
('1003', '4', 'See appendix 3');
INSERT INTO `schedule` (`course_code`, `weekID`, `topic`, `readings`, `activities`) VALUES
('1003', 1, 'Computational Thinking Concepts, Programming languages', 'On-line Video', 'Familiarization with Raspberry Pi (RPi) board'),
('1003', 2, 'Basic internal operation of computer', 'On-line Video', 'IDE for Python on RPi'),
('1003', 3, 'Basic program structure:\r\nCase Study, Pseudo code and flowchart', 'On-line Video', 'Python programming exercises'),
('1003', 4, 'Basic program structure: Data type, Variable, sequence, logic and comparison operation', 'On-line Video', 'Python programming exercises'),
('1003', 5, 'Basic program structure:\r\nSelection and Iteration', 'On-line Video', 'Python programming exercises'),
('1003', 6, 'Procedural abstraction: function and library', 'On-line Video', 'Python programming exercises (function)'),
('1003', 7, 'Data abstraction: Data structure', 'On-line Video', 'Python programming exercises (function)'),
('1003', 8, 'Decomposition Case study', 'On-line Video', 'Mini project - Flow Chart Design'),
('1003', 9, 'Pattern recognition Case study', 'On-line Video', 'Mini project - Coding'),
('1003', 10, 'Algorithms Sorting algorithm', 'On-line Video', 'Mini project - Coding and debugging'),
('1003', 11, 'Algorithm design Searching algorithm', 'On-line Video', 'Mini project - Coding and debugging'),
('1003', 12, 'Algorithm complexity analysis\r\nBig-O concept', 'On-line Video', 'Mini project - Testing and assessment'),
('1003', 13, 'Computing trends and Ethical considerations', 'On-line Video', 'Mini project - Testing and assessment');
INSERT INTO `schedule_lo` (`course_code`, `weekID`, `loID`) VALUES
('1003', 1, 3),
('1003', 1, 4),
('1003', 2, 1),
('1003', 3, 2),
('1003', 4, 2),
('1003', 5, 2),
('1003', 6, 2),
('1003', 6, 3),
('1003', 7, 2),
('1003', 7, 3),
('1003', 8, 2),
('1003', 8, 3),
('1003', 8, 4),
('1003', 9, 2),
('1003', 9, 3),
('1003', 9, 4),
('1003', 10, 2),
('1003', 10, 3),
('1003', 10, 4),
('1003', 11, 2),
('1003', 11, 3),
('1003', 11, 4),
('1003', 12, 2),
('1003', 12, 3),
('1003', 12, 4),
('1003', 13, 1);
